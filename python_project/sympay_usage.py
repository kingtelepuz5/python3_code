#import matplotlib.pylab as plt
#import pandas as pd
#import matplotlib
#matplotlib.style.use('ggplot')
#data = presidents_df = pd.read_csv('https://sololearn.com/uploads/files/president_heights_party.csv', index_col='name')
from math import sqrt
import sympy as sp
''' x^2+10x+3=0 '''
x = sp.symbols('x') #указываем что будем использовать символьные вычисления,
f = x**2 + 10*x + 3 #Первый аргумент для solve()- это уравнение (равное нулю), а второй аргумент - это символ, для которого мы хотим решить уравнение.
print(sp.solve(f))
''' f = cos(x)sin^2(x)'''
x = sp.symbols('x')

f = sp.cos(x)*sp.sin(x)**2
f1 = sp.diff(f,x) # производная
#print(*obj, sep='строка которой нужно разделить объекты', end='\n(строка в конце)', file=sys.stdout(вывод стандарт),)
print("это результат производной",f1 , sep='я хочу сказать что ',end='\n' )
print(1,2,3,'hello world', sep='::')

a , b = 2.0, 3.0
S = sqrt(a**2 + b**2)

mes = "Гипотенуза треугольника с катетами {} и {} равна {}" # используем {} как гипервставку

print(mes.format(a, b, S)) # вставляем в {} с помощью функции формат
# так же можно использовать как подстановку аргументов
c, d = 10, 5
mes = "{0}+{1}, но {0}-{1}={3}, но еще {0}+{1}={2}" #индекс соотвествует порядку из формата
print(mes.format(c, d, c+d, c-d))# создаем форматы для индексов

a1, b1 = 10, 5
mes = "{arg1} + {arg2} = {res}" # создаем вывод
print(mes.format(arg1 = a, arg2= b, res = 1+b)) # помещаем в вывод значения через принт

a2 = [1, 2, 3, 5, 6, 7, 10]
print('First: {0[0]}, second: {0[1]}'.format(a2)) # создаем вывод и помещаем в вывод а2

a3, b3 = 10, 5

mes = "it's arg3 : {arg3} + b3 {} = a3 + b3 =  {res3}"
print(mes.format(b3, arg3 = a3, res3 = a3 + b3))



'''
спецификация форматирования
'<' - символы справо
'>' - символы слева
'=' - заполнитель будет после знака, но перед цифрами. только для чисел
'^' - по центру
только для чисел
'+' - знак числа должен использован для всех
'-' - "-"для отрицательных, ничего для положительных
'Пробел'- "-" для отриц , для положительных пробел
тип
'd', 'i', 'u' - десятичное число
'o' - число в восьмиричной системе исчесления
'x' - 16-ричная, нижний регистр
'X' - 16-ричная, верхний регистр
'e' - число с "," с экспонентой в нижнем регистр. "," = число с плавающией точкой
'E' - тоже, но в верх регистр
'f', 'F' - число с "," обычный формат
'g' - число с "," с експонентой в Нижн риг. если она меньше чем -4, иначе обычный формат
'G' - число с "," с експонентой в Верх риг. если она меньше чем -4, иначе обычный формат
'c' - Символ юникод
's' - строка
'%' - число умножается на 100, отображается число в ","
'b' - binary
'''
print('{0:10d}, {1:<5d}'.format(15, 25)) # вывод 2 символов в поле шириной 10 символов и 5, с выравниванием по правому краю
print('{0:^10d}, {1:>10d}'.format(15, 25)) # первое по центру, второе по правому краю
def c16(a,b): #  два числа в 16 ричной системе
    print('{0:>x} <-число в 16 ричной системе от {0},\n{1:>x} <- число в 16 системе от {1} '.format(a, b))
def c8(a,b): # два числа в 8 ричной системе
    print('{0:>o} <-число в 8 системе от {0},\n{1:>o} <- число в 8 системе от {1}'.format(a, b))
def c01(a,b):
    print('{0:>b} <- бинарное число от {0},\n {1:>b} <- бинарное число от {1}'.format(a,b))
def c_un(a,b):
    print('{0:>c} <- юникод число от {0},\n {1:>b} <- юникод число от {1}'.format(a,b))
c01(55, 10)
c16(55, 10)

c_un(55,10)
print("ВОТ ВЫВОД БИНАРНОГО ЧИСЛА 112 и 145")
c01(112,145)
print('{0:-10.3f}'.format(-11.3)) # три знака после запятой 3f, и обязательный вывод знака числа "-"
print('{0:_^10.3f}, число с заполнителем'.format(12.123124))
#user_input = input("Введите ваше имя_: ")
#print("Ваше имя: " ,user_input)
#для преоброзования в другие типы нужно использовать обязательные функции float, int,
#value = float(input("Введите свои числа "))
#print("Ваши числа ", value)
# r- чтение, w - запись, x - создание если еще нет, a - добавление в файл, r+ - чтение и запись, t- текстовый файл, b - binary
message = 'Live long and prosper'
f = open('data_file', 'wt')
t = f.write(message)
f.close()
print(t)
